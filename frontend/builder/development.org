#+Title: App development builder
#+Author: Rabbit


* App development builder

  Build development App.



** Project && Folder structure

*** Folder structure introduction 文件目录结构及说明
    
    #+BEGIN_SRC
   source/                               # 项目源码
     |- lib/                             # 工具或帮助函数
       |- styles/                        # 工具样式
         |- global/                      # 全局样式
           |- [GlobalResetFile].css
           |- index.css                  # 全局重置样式
           |- theme.css                  # :root 全局变量
         |- [Utils].css                  # 工具样式库
       |- __tests__/                     # 工具函数测试
         |- [UtilsTest].js
       |- [Utils].js                     # 工具函数

     |- component/                       # 组件
       |- [ComponentName]/
         |- __tests__/                   # 组件测试
           |- status.js                  
           |- index.js                   
         |- index.js                     # React组件
         |- style.css                    # 组件样式
         |- view/                        # 子组件
           |- [SubComponentName]/
             |- index.js
             |- style.css
         |- types.js                     # 组件Action与Model类型定义
         |- state.js                     # 组件状态与Action
         |- README.org                   # 说明文件

     |- core/                            # 逻辑核心
       |- [ModuleName]/
         |- __tests__/                   # 逻辑测试
           |- status.js
         |- types.js                     # Action与Model类型定义
         |- state.js                     # Update/InitModel/Action状态定义
       |- index.js                       # 全局store

     |- view/                            # React视图层
       |- [PageName]/
         |- __tests__/                   # 视图测试
           |- index.js
         |- index.js                     # 主容器视图定义
         |- style.css                    # 视图组件样式
       |- index.js                       # 路由定义
   
     |- index.js                         # 组合视图与逻辑
     |- boot.js                          # 开发/产品环境启动配置
   #+END_SRC



   
** Configure Alias
  

*** Webpack 别名系统

    如果文件嵌套很深的情况下，路径会出现很多的 =../=

#+BEGIN_SRC css
/**
 * component/foo/view/bar/style.css
 */

.test {
  composes: '../../../../lib/styles/util.css'
}
#+END_SRC

    可以使用 Webpack 的[[http://devdocs.io/webpack~2/configuration/resolve/index#resolve-alias][ Alias]] 来解决这个问题

    通过使用路径别名，就可以不用在写太长的相对路径了，只需要给他个名称就好

#+BEGIN_SRC js
resolve: {
  alias: {
    lib: path.resolve('src', 'lib')
  }
}
#+END_SRC

    定义别名时尽量使用绝对路径，就是用path.resolve来定义目录路径，避免不必要的麻烦


*** 已定义的Alias

| Name      | Folder         |
|-----------+----------------|
| lib       | src/lib        |
| style     | src/lib/styles |
| core      | src/core       |
| view      | src/view       |
| component | src/component  |


:TODO: assets path


*** 使用Alias带来的问题

    提升开发效率的同时，使用alias也会带来一定的问题，其中最重要的就是工具会无法识别我们改写之后的路径

    比如 [[http://facebook.github.io/jest/][Jest ]]和[[https://flow.org/][ Flow]]

*** 配置Jest

    当我们使用Jest对代码经行测试时，会因alias找不到目标文件而报错，所以我们需要配置Jest的[[http://devdocs.io/jest/configuration#modulenamemapper-object-string-string][moduleNameMapper]]

    大概就是按照Jest所定义的规则在=package.json=将Alias再重写一遍

#+BEGIN_SRC js
{
  "jest": {
    "moduleNameMapper": {
      "^lib/(.*)$": "<rootDir>/src/lib/$1",
      "^style/(.*)$": "<rootDir>/src/lib/styles/$1",
      "^view/(.*)$": "<rootDir>/src/view/$1",
      "^component/(.*)$": "<rootDir>/src/component/$1",
      "^core/(.*)$": "<rootDir>/src/core/$1"
    }
  }
}
#+END_SRC


*** 配置Flow

    使用Flowtype来检查类型的话，也会遇到同样的问题

    这就需要在 =.flowconfig= 中定义[[http://devdocs.io/flow/config/options#toc-module-name-mapper-regex-string][mamemapper]]

#+BEGIN_SRC js
[options]
module.name_mapper='^lib\/\(.*\)$' -> '<PROJECT_ROOT>\/src\/lib\/\1'
module.name_mapper='^style\/\(.*\)$' -> '<PROJECT_ROOT>\/src\/lib\/styles\/\1'
module.name_mapper='^view\/\(.*\)$' -> '<PROJECT_ROOT>\/src\/view\/\1'
module.name_mapper='^component\/\(.*\)$' -> '<PROJECT_ROOT>\/src\/component\/\1'
module.name_mapper='^core\/\(.*\)$' -> '<PROJECT_ROOT>\/src\/core\/\1'
#+END_SRC

*** TODO 配置emacs

TODO
